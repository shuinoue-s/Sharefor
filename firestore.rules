rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(userId) {
      return isAuthenticated() && userId == request.auth.uid;
    }
    function minMax(value, min, max) {
      return value.size() >= min && value.size() <= max
    }
    function isValidUser(user) {
      return user.size() == 6
      && 'uid' in user && user.uid is string
      && 'user_id' in user && user.user_id is string && minMax(user.user_id, 1, 15) //(user.user_id.size() >= 1 && user.user_id.size() <= 15)
      && 'user_name' in user && user.user_name is string && minMax(user.user_id, 1, 50) //(user.user_name.size() >= 1 && user.user_name.size() <= 50)
      && 'icon_path' in user && user.icon_path is string
      && 'icon_name' in user && user.icon_name is string
      && 'created_at' in user && user.created_at is timestamp;
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isUserAuthenticated(userId)
      && isValidUser(request.resource.data)
      && request.resource.data.created_at == request.time
      && request.resource.data.uid == userId;
      allow update: if isUserAuthenticated(userId)
      && isValidUser(request.resource.data)
      && request.resource.data.created_at == resource.data.created_at;
      allow delete: if isUserAuthenticated(userId);
    }
  }
}